#+TITLE: Random Variables and Measures in Aesara
#+AUTHOR: RÃ©mi Louf and Brandon T. Willard
#+DATE: 2022-11-30
#+EMAIL: aesara.devs@gmail.com

#+STARTUP: hideblocks indent hidestars
#+OPTIONS: ^:nil toc:nil tex:t d:results
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+PROPERTY: header-args :eval never-export :exports both :results output drawer replace
#+PROPERTY: header-args+ :session
#+PROPERTY: header-args:latex :results raw replace :exports results :eval yes

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../extra/custom.css" />

#+INCLUDE: latex-setup.org
#+BEGIN_SRC elisp :eval t :exports none :results none
;; If you want to load content from another org file...
(org-babel-lob-ingest "org-babel-extensions.org")
#+END_SRC

#+BEGIN_abstract
In this document we lay out the theoretical foundations for the representation and manipulation of random variables and probabilistic measures across the Aesara projects. The goal is to provide the language and the tools necessary to build flexible and non-ambiguous representations of probabilistic models.
#+END_abstract

* Introduction
:PROPERTIES:
:CUSTOM_ID: sec:introduction
:END:

Let us first introduce the mathematical notions and notations that will be used throughout this document.

* Random Variables
:PROPERTIES:
:CUSTOM_ID: sec:random-variables
:END:

Random variables are represented in Aesara with the =RandomVariable= operator, which corresponds to the following mathematical function:

$$
\operatorname{RandomVariable}: \Omega \times \Theta \to E
$$

Where $\Omega$ is the set of available seeds for the pseudo-random number generator, $\Theta$ the parameter space and $E$ the state space, in which the random variable takes its values. Aesara defines several random variable that are implicitly associated with probability measures of known density, association that is made explicit in AePPL. An Aesara graph that contains =RandomVariable= operators return samples from the associated distribution, i.e. elements of $E$ weighed by the density:

#+begin_src python
import aesara.tensor as at

srng = at.random.RandomStream(0)
x_rv = srng.normal(0, 1)
print(x_rv.eval())
#+end_src

#+RESULTS:
:results:
1.4436909546981256
:end:

The parameters of =RandomVariable=\s and the state space $E$ can be of different types; the mean $\mu$ and $\sigma$ parameters of =NormalRV= are scalars $\in \mathbb{R}$ but, for instance, =DirichletRV= takes a vector $\alpha \in \mathbb{R}^k$ as a parameter and returns a vector $\in \mathbb{R}^k$:

#+begin_src python
import aesara.tensor as at

srng = at.random.RandomStream(0)
alpha = at.as_tensor([1., 1., 1.])
x_rv = srng.dirichlet(alpha)
print(x_rv.eval())
#+end_src

#+RESULTS:
:results:
[0.62036389 0.14374215 0.23589397]
:end:

To create independent random variables, the =RandomVariable= operators apply the broadcasting rules between the parameters; Identically indepedently distributed random variables can be represented by a =RandomVariable= operator where the parameter =size= is used.


=RandomVariable= operators behave like generalized universal functions; they possess a set of core dimensionalities and can be vectorized over arrays of parameters, or repeated. This behavior is summarized in a gufunc-like signature =(), () -> ()= signature.

* Measures
:PROPERTIES:
:CUSTOM_ID: sec:measures
:END:

Like [[citet:carette2016]] we add informal typing rule which define a data type of measures. We will say in the above cases that elements of $E$ are respectively of type $\mathbb{R}$ (type of reals) and $\mathbb{R}^k$ (type of real vectors). We define an abstract type of measures by saying that if $A$ is a type, let $\mathbb{M}A$ be a measure over $A$:

$$
\frac{
    \mu : \mathbb{R} \qquad \sigma : \mathbb{R}
}{
    \operatorname{normal}(\mu, \sigma) : \mathbb{M}\mathbb{R}
}
$$

$$
\frac{
    \alpha : \mathbb{R}^k
}{
    \operatorname{dirichlet}(\alpha) : \mathbb{M}\mathbb{R}^k
}
$$


$$
\frac{
    n : \mathbb{N} \qquad p : \mathbb{R}^k
}{
    \operatorname{multinomial}(n, p) : \mathbb{M}\mathbb{N}^k
}
$$


The type of elements of $E$ is called the /domain type/.

Here we describe how we define measures, and attach measures to existing =RandomVariable= objects. We need the manifold the =RandomVariable= maps to (/domain/), the base measure relative to which the density is computed.

Manifolds: $\mathbb{R}$, $\mathbb{Z}$, $\left[a, b\right]$, $\mathbb{B}$, Circle (for future work), etc.

We further specify the abstract type $\mathbb{M}A$ by defining subtypes that correspond to the base measure relative to which the density is defined:

$\operatorname{Lebesgue}(A)$
$\operatorname{Counting}(A)$

For instance:

$$
\frac{
    \mu : \mathbb{R} \qquad \sigma : \mathbb{R}
}{
    \operatorname{normal}(\mu, \sigma) : \operatorname{Lebesgue}(\mathbb{R})
}
$$

$$
\frac{
    \alpha : \mathbb{R}^k
}{
    \operatorname{dirichlet}(\alpha) : \operatorname{Lebesgue}(\mathbb{R}^k)
}
$$


$$
\frac{
    n : \mathbb{N} \qquad p : \mathbb{R}^k
}{
    \operatorname{multinomial}(n, p) : \operatorname{Counting}(\mathbb{R}^k)
}
$$


An important measure is the =dirac= measure defined in AePPL:

$$
\frac{x: \mathbb{R}}{
 \operatorname{dirac}(x): \operatorname{Counting}(\left\{x\right\})
}
$$


Describe how densities are assigned to measures.

How to compute a measure's density relative to another measure that is not the Lebesgue measure or the Counting measure.

Use a variety of measures for the examples:

- =Normal= defined on $\mathbb{R}$ with $\operatorname{Lebesgue}$ base measure;
- =MultivariateNormal= defined on $\mathbb{R}^N$ with $\operatorname{Lebesgue}$ base measure;
- =Beta= defined on $\left[0, 1\right]$ with $\operatorname{Lebesgue}$ base measure;
- =Poisson= defined on $\mathbb{N}$ with $\operatorname{Counting}$ base measure;
- =Bernoulli= defined on $\mathbb{B}$ with $\operatorname{Counting}$ base measure;
- =Dirichlet= defined on the unit simplex with $\operatorname{Lebesgue}$ base measure;
- =VonMisesFisher= distribution defined on the unit circle with $\operatorname{Lebesgue}$ base measure;

* Transform random variables
:PROPERTIES:
:CUSTOM_ID: sec:transform-random-variables
:END:

Here we describe operations on =RandomVariable= to get the pushfoward measure of the transformed variables. How to account for non-$\mathbb{R}$ manifolds in future work. Functions that embed the =RandomVariable= in a different domain/manifold (Circle, Simplex, etc.)

- Bijectors
- Destructive operations such as =at.clip=

* Transform measures
:PROPERTIES:
:CUSTOM_ID: sec:transform-measures
:END:

Here we describe the transformations that we can apply to measures (chaining, superposition, power measures, etc.), and to domains (truncation).

* Equivalence between measures
:PROPERTIES:
:CUSTOM_ID: sec:measure-equivalence
:END:

Here we define the notion of equivalence between measures and how these equivalence relation are implemented in AePPL.

* Canonical representation
:PROPERTIES:
:CUSTOM_ID: sec:canonical-representation
:END:

Here we define AePPL's canonical representation: first-class measures, and how derived measures are represented and implemented.

* Disintegration (computing the density)
:PROPERTIES:
:CUSTOM_ID: sec:disintegration
:END:

Here we describe the disintegration process in =AePPL=. In particular, mention the dual measure/elements of the domain representation that is necessary to condition on transforms of random variables (the =ValuedVariable=s).

#+BIBLIOGRAPHYSTYLE: plainnat
#+BIBLIOGRAPHY: ../tex/aesara-probability.bib
